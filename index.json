[{"categories":["Notas"],"contents":"Nota: Esta guía la escribí hace mucho y puede tener errores o poco detalle en partes importantes.\nAntes que nada Arrancar archiso x86_64. Se inicia sesión como root por defecto (arrancar archiso x86_64 inicia una sesión con los máximos permisos)1\nComprobar que estamos conectados a internet haciendo:\nping archlinux.org Si la computadora recibe datos, entonces sí estamos. Podemos terminar la prueba con Ctrl+c2. Ahora empieza la instalación.\nPara evitar problemas, escogemos la disposición de teclado adecuada, asignando al programa loadkeys el archivo relevante (e.g. loadkeys de-latin1)3. Para ver la lista de disposiciones de teclado hacemos\nls /usr/share/kbd/keymaps/**/*.map.gz Nótese que omitimos la ruta hacia el archivo de-latin1.map.gz y omitimos también su extensión4.\nModos de arranque Debemos revisar si la computadora arranca en modo BIOS, UEFI, o CSM. Esto determinará algunas de las características de la instalación, como las referentes a la llamada partición de arranque, entre otras cosas.\nPara saber en qué modo estamos, corremos ls así:\nls /sys/firmware/efi/efivars Si podemos ver tal directorio sin ningún error, entonces la compu arranca en modo UEFI. Esto implica que Archiso usó systemd-boot (un gestor de arranque) para cargar el kernel y disco RAM inicial (initrd)5.\nSegún el modo (UEFI, BIOS) en que arranque la compu, tendremos que particionar el disco de manera adecuada:\nFormato MBR (Master Boot Record) si la compu inicia en modo BIOS. Formato GPT (Global Partition Table) si la compu inica en modo UEFI. Además, habrá que respetar las limitaciones de dichos formatos, como el tamaño máximo de una partición, etc.\nAquí haremos un disco particionado para funcionar (arrancar, iniciar) en un sistema UEFI.\nSobre la fecha y hora El servicio 6 timedatectl controla la fecha y hora del sistema. Para sincronizarlo con la red, hacemos:\ntimedatectl set-ntp true Luego revisamos que sí esté sincronizado con:\ntimedatectl status Más tarde escogeremos una zona horaria.\nParticionar discos Ya podemos preparar el disco que tendrá ArchLinux. Esto lo haremos con el programa fdisk.\nPrimero vemos los discos que hay conectados: fdisk -l El disco 0 sería sda, el disco 1 sería sdb, etc. Hay sda, sdb, sdc, \u0026hellip; , sdx. Todas las particiones del disco sdx son sdx1, sdx2, \u0026hellip; , sdxn. Cuando decidamos en qué disco queremos trabajar, lo seleccionamos. Aquí como ejemplo trabajaremos con sda, pero este puede no ser el caso. SIEMPRE hay que revisar las cosas 2 veces cuando se trabaja con fdisk.\nSIEMPRE hay que revisar las cosas 2 veces cuando se trabaja con fdisk.\nPara seleccionar sda (como ejemplo):\nfdisk /dev/sda Ahora prepararemos la partición de sistema EFI. Se recomienda hacerla de 512Mb. Es conveniente revisar sus requisitos, riesgos y limitaciones.\nEscribimos n para hacer una nueva partición.\nEscogemos el número que tendrá dicha partición. La convención es seguir un orden ascendente; es decir, si sda ya tenía sda1 y sda2, lo más estándar será nombrar a la siguiente partición con un 3.\nSi presionamos Enter sin haber dado un número, fdisk usará el número indicado como \u0026lt;\u0026lt;default\u0026gt;\u0026gt;.\nEscogemos también el primer sector. Nuevamente, si no se da un arcumento, se usará la propuesta \u0026lt;\u0026lt;default\u0026gt;\u0026gt;.\nLo mismo sucede con el último sector. Pero obviamente, el tamaño de la partición creada será la diferencia del sector final menos el sector inicial.\nPara hacer que el último sector de la partición esté 512Mb después que el primero, escribimos +512M y presionamos Enter\nfdisk suele hacer las particiones del tipo Linux filesystem. Pero queríamos una partición de tipo EFI. Habrá que cambiar el tipo.\nPresionamos t. fdisk pregunta por el número de la partición cuyo tipo queremos cambiar.\nUna vez especificado el número de la partición, presionamos L para tener un listado con los tipos de particiones. La lista es muy larga. Podemos presionar q para salir de ella.\nCuando encontramos el número en la lista para el tipo de formato que buscamos, salimos de la lista y damos dicho número a fdisk.\nAhora comprobamos que la partición sea tal como la queríamos al principio listando las particiones con p\nDe manera similar, creamos una partición grande para el directorio raíz, del tipo Linux Filesystem, y otra partición del tipo Linux swap en el espacio restante (al menos 2Gb).\nRevisamos todo lo que hicimos con p, y SÓLO SI ES CORRECTO, aplicamos los cambios con w. NO HAY VUELTA ATRÁs.\nLuego de correr el comando w(rite) en fdisk, los cambios en el disco son IRREVERSIBLES.\nSe pueden hacer particionados más complejos, pero por ahora esto está bien. Deberíamos tener:\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026ndash;512M\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;$\\geq$ 10Gb\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026ndash;$\\geq$ 2Gb\u0026mdash;\u0026ndash; Part. de Win si se hace dual-boot EFI Sistema Linux Swap Ahora nos aseguramos de que la partición de sistema EFI tenga un formato FAT32 así: mkfs.fat -F32 /dev/sdxn Reemplazando sdxn con el disco y partición relevantes (e.g. sdb3)\nLe indicamos a Arch que nuestra partición tipo SWAP será en efecto nuestra área de trasiego con mkswap : mkswap /dev/sdxn y la iniciamos con swapon : swapon /dev/sdxn Nos encargamos también de que la partición del Sistema Linux tenga un formato Ext4 : mkfs.ext4 /dev/sdxn Todo está listo para que arch pase al disco duro. Vamos a montar el sistema de archivos que hemos creado (la partición de Sistema Linux $\\geq$ 10Gb).\nMontar el sistema de archivos Con montar queremos decir:\nhacer una partición accesible a Arch asignándole un archivo (el punto de montaje) en el árbol de directorios.\nPara ello usamos mount :\nmount /dev/sdxn /mnt Donde sdxn es la partición del sistema y se ha montado como /mnt\nCreamos un directorio boot en ese punto de montaje: mkdir mnt/boot Y montaremos la partición de sistema EFI ahí: mount /dev/sdxn /mnt/boot Donde sdxn es la partición de sistema EFI.\nComprobamos que ambas particiones estén montadas en los directorios correctos con df :\ndf En la columna Filesystem buscamos dichas particiones, y en la columna Mounted on estarán los puntos de montaje que hemos asignado:\nFilesystem 1K-blocks Used Available Use% Mounted on dev 8151048 0 8151048 0% /dev run 8159992 1072 8158920 1% /run /dev/sda2 939144724 97067796 794297244 11% / tmpfs 8159992 20124 8139868 1% /dev/shm /dev/sda1 523244 99588 423656 20% /boot tmpfs 8159996 7448 8152548 1% /tmp tmpfs 1631996 16 1631980 1% /run/user/1000 Buscamos tener /mnt para la partición de Sistema Linux, y /mnt/boot para la partición de Sistema EFI.\nAhora que Arch tiene acceso a esas particiones (pues ya tienen un lugar en el árbol de directorios) vamos a instalar los paquetes esenciales con pacstrap.\npacstrap pacstrap es una herramienta para instalar Arch. No debe confundirse con pacman, que se instala con pacstrap y sirve como administrador de paquetes una vez que estamos en Arch (ahora mismo estamos en ArchIso o algo así).\nInstalamos el paquete base, el paquete linux, y el paquete linux-firmware. Todos ellos en /mnt : pacstrap /mnt base linux linux-firmware En realidad son grupos de paquetes, no paquetes individuales.\nAl terminar la instalación, generamos el archivo de configuración del sistema fstab.\nfstab fstab contiene las características de todos los dispositivos de almacenamiento, como sus UUID\u0026rsquo;s, sus opciones de montaje, y sus permisos. Este archivo estará en /etc/fstab, y para generarlo usaremos genfstab :\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Con esta línea le pedimos a genfstab que revise las particiones puestas en /mnt (esto es, desde ahí hasta el final de la jerarquía en el árbol de directorios), que use los UUID\u0026rsquo;s, y que el resultado (la salida, el output) sea escrito en el archivo /mnt/etc/fstab. Podemos abrir el archivo de salida con vi, sólo para comprobar que se ve correcto:\nvim /mnt/etc/fstab Salimos de vi con q!. Si estamos en modo edición, primero presionamos ESC y luego escribimos :q! para salir sin guardar cambios que hayamos hecho por accidente.\nYa tenemos Arch instalado en el disco, listo para arrancar, pero no configurado.\nSaliendo del medio de instalación, y entrando al sistema operativo Hasta ahora, el prompt de la consola aún dice:\nroot@archiso~ # Donde el signo # indica que la terminal está lista (y esperando) para recibir comandos dados por root, el superusuario o usuario raíz, así que no es necesario correr las cosas con sudo o pedirle privilegios al sistema por otros medios.\nEl # sería reemplazado por un $ si estuviéramos haciendo cosas como un usuario estándar (y tendríamos que usar sudo para cuestiones administrativas, a menos que iniciemos una nueva sesión como usuario-raíz).\nPero lo importante ahora mismo es que el usuario raíz está en el sistema con hostname archiso. Es decir, el USB de instalación, y no la computadora misma7.\nTenemos entonces que cambiar el directorio raíz con arch-chroot. Queremos que nuestro nuevo directorio raíz (el nivel más alto en la jerarquía del árbol de directorios) de todo Arch sea /mnt. Hacemos:\narch-chroot /mnt Ya estamos trabajando en un sistema operativo, pero no tenemos mucho más. /mnt ahora es sólo /. Vamos a configurar algunas de las cosas más esenciales.\nZona horaria Queremos crear un enlace simbólico8 desde /usr/share/zoneinfo/Mexico/General o el archivo adecuado (revisar con ls o con la completición automática con TABULADOR) hacia /etc/localtime. Para ello usamos ln :\nln -sf /usr/share/zoneinfo/Mexico/General /etc/localtime El flag -s y -f se pueden combinar como -sf. La s es de de softlink, y la f de file. No tengo idea de lo que significan esos flags y me da flojera revisar eso.\nAhora sincronizamos el reloj del sistema con el reloj de la mobo9 así:\nhwclock --systohc hc viene de hardware clock.\nTambién queremos activar el locale necesario para tener la localización geográfica y codificación de caracteres adecuados.\nLocalización geográfica La idea de configurar un locale es que todos los programas instalados y sitios web sepan sobre nuestras preferencias de idioma y charset (mapas de caracteres, que incluyen acentos y símbolos. Cirílico para Rusia, kanji para Japón, abjad para Arabia, etc).\nPara activar el locale que queremos usar, necesitamos locale-gen. Pero primero debemos modificar el archivo /etc/locale.gen con un editor de texto.\nAnteriormente usamos vi para revisar el contenido del archivo fstab. Pero vi estaba en el iso del medio de instalación. Ya no lo tenemos ahora que estamos en nuestro propio sistema, con su propia raíz y sus dependencias básicas instaladas.\nEntre esas dependencias está pacman, que podemos usar para instalar vim :\npacman -Sy vim Ahora, con vim instalado, abrimos el archivo de configuración para locale-gen :\nvim /etc/locale.gen Para habilitar un locale, descomentamos el nombre de tal locale. Podemos buscar cadenas de texto haciendo /cadena, reemplazando cadena con lo que buscamos.\nProbemos buscando y descomentando en_US.UTF-8 UTF-8 o es_MX.UTF-8 UTF-8 (o ambos!). Presionamos esc para salir del modo insert, y luego escribirmos :x para guardar y salir.\nAhora corremos locale-gen así:\nlocale-gen Ya que generamos los locales, abrimos /etc/locale.conf con vim:\nvim /etc/locale.conf Y escribimos la siguiente línea:\nLANG=en_US.UTF-8 para que el lenguaje del sistema sea inglés10.\nHostname El Hostname es el nombre que nuestra computadora reporta a la red local. No confundir con su IP. Redes grandes usan nombres con UUID\u0026rsquo;S11, pero podemos usar cualquier nombre (e.g. Poderosísimo_Servidor).\nSi Queremos un UUID, podemos usar uuidgen, o ver qué propone el OS en /etc/machine-id.\nUsuarios y contraseñas Hacemos una contraseña para el usuario root, el cual estamos usando actualmente:\npasswd Y damos la nueva contraseña.\nAhora añadimos un nuevo usuario \u0026ldquo;daquavious\u0026rdquo;:\nuseradd -g users -G power,storage -m daquavious -g es para el grupo, -G es para el(los) subgrupo(s). Todo usuario pertenece a un grupo y cero o más subgrupos.\n-m sirve para crear un directorio hogar. En este caso, se va a crear /home/daquavious.\nSi quisiéramos un nombre de usuario con mayúsculas12:\nuseradd -g users -G power,storage -m Daquavious --force-badname Para darle (o cambiarle) una contraseña a daquavious:\npasswd daquavious Y para cambiar su nombre de daquavious a bingleton:\nusermod -l bingleton daquavious También vamos a hacer un usuario invitado13 :\nuseradd -g user -m invitado Para que invitado no tenga contraseña:\npasswd -d invitado Instalar GRUB y usar os-prober14 Instalamos grub y efibootmgr :\npacman -S grub efibootmgr También os-prober para encontrar y añadir a grub.cfg la partición de inicio de Windows:\npacman -S os-prober Probamos que os-prober funcione corriendo el comando os-prober y esperando que no se muestre ningún error.\nAhora sí, instalamos GRUB (i.e. lo convertimos en nuestro gestor de arranque, el bootloader) especificando la arquitectura de nuestro CPU, el directorio de instalación, y el identificador de GRUB:\ngrub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB2 La elección del identificador es libre, pero el nombre GRUB2 tiene sentido.\nHay que montar la partición que contiene el bootloader de windows para que os-prober la detecte. Para ello listamos todos los discos y particiones que existen en el sistema:\nfdisk -l y cuando la encontremos (supongamos que es sdxn):\nmount /dev/sdxn /mnt2 Si el punto de montaje (en este caso mnt2) no existe, lo creamos antes de montar con:\nmkdir /mnt2 Creamos automáticamente (se puede hacer manualmente) una configuración para grub:\ngrub-mkconfig -o /boot/grub/grub.cfg Revisamos que se encuentre y cree una entrada de Windows Boot Manager.\nSi ha funcionado, tenemos un dual-boot exitoso, pero la próxima vez que iniciemos Arch (ahora sí, sin el medio de instalación), no podremos descargar paquetes, porque no hemos configurado la red. Es conveniente hacerlo antes de reiniciar el equipo.\nNetworkManager Se puede configurar lo referente al adaptador de internet con mucho detalle, pero de momento, dejamos que networkmanager lo haga. Debemos instalarlo:\npacman -S networkmanager Y debemos hacer que arranque siempre que se inicie arch:\nsystemctl enable NetworkManager Las mayúsculas importan.\nDisposición de teclado También queremos que Arch siempre cargue la disposición de teclado que escogimos esta sesión cuando usamos loadkeys al inicio de la guía. Para ello, abrimos /etc/vconsole.conf con un editor de texto (como siempre, vim está bien), y escribimos:\nKEYMAP=la-latin1 para un teclado latinoamericano15.\nCon todo lo anterior ya podemos salir de arch con exit para regresar al medio de instalación, y apagar el equipo con shutdown now o reiniciar con reboot. Luego quitamos el USB con la ISO de Arch y comprobamos que la mobo arranque GRUB, y que GRUB nos muestre entradas para Linux y para Windows como se debe.\nPor último, dejo aquí un pdf. Si no lo puedes leer desde aquí,\nDescárgalo haciéndo click aquí ¿No es un riesgo permitir que alguien con un USB pueda arrancar un OS con máximos permisos?\nSí. Pero si esa persona tuvo permiso para poner un usb en un puerto y además arrancar la computadora desde cero, entonces ya es alguien con acceso físico, que es en sí un permiso. Además, las motherboards pueden denegar arranque a OS\u0026rsquo;es que no sepan responder a una clave en la memoria de arranque seguro (secure boot). De hecho para instalar arch, tuve que borrar las claves de arranque seguro porque mi motherboard sólo aceptaba ISO\u0026rsquo;s firmadas por Microsoft\n\u0026#160;\u0026#x21a9;\u0026#xfe0e; Ctrl+C envía una señal al proceso que estaba escuchando al teclado. Esta señal es SIGINT. Para más sobre señales, ver TODO:señales.md\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLa distribución de mi teclado funcionó bien con es.map, y aún mejor con latin.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDe manera similar, la fuente de la consola se cambia con el programa setfont, los archivos de fuentes están en /usr/share/kbd/consolefonts\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSi no existe ese directorio, la compu arranca en modo BIOS o en modo CSM, y ArchLinux usó syslinux en vez de systemd-boot. Esta guía la escribí para motherboard con interfaz UEFI\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUn servicio es un proceso que no espera interacciones con el usuario más allá de iniciarlo o detenerlo manualmente; por lo demás, este proceso está bajo su propia dirección o, más comúnmente, bajo la dirección del llamado init system. En nuestro caso, el init system es systemd. Ver la nota TODO:Systemd\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLa sintaxis del prompt por defecto es username@hostname workingdir #/$. Si vemos root@archiso~ #, sabemos que el usuario llamado root está en la computadora llamada archiso y en el directorio ~\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLos enlaces simbólicos son algo similar a lo que en MSWindows se conoce como \u0026ldquo;acceso directo\u0026rdquo;. Hay mucho que decir al respecto, y tal vez valga la pena escribir una nota (TODO)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMotherboard, Tarjeta madre\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nO es_MX.UTF-8 para usar español, obviamente. Prefiero inglés porque es el lenguaje en el que se suelen hacer preguntas, enviar logs, etc\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUniversally Unique Identifier\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEs mala idea hacer nombres con mayúsculas. Usuarios con mayúsculas (e.g. Invitado) sólo crean confusión, pues muchos servicios web no distinguen mayúsculas (e.g. servidores de correo electrónico), y además existen sistemas que conservan ajustes antiguos de la época en que existían teclados/sistemas con sólo mayúsculas. Algunos programas leen una mayúscula y asumen que se está trabajando en un teclado de ese tipo.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHacer que un invitado sea parte de power y storage es una idea estúpida. Le estamos dando el poder de apagar nuestro sistema o crear/borrar archivos que no debería\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nInstrucciones válidas sólo para sistemas UEFI\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEsta es la distribución de teclado que se usará en las TTY\u0026rsquo;s, y es independiente de la que se use en un entorno gráfico (e.g. X11)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-03-31T00:00:00Z","permalink":"https://fabrice-bernes.github.io/post/instalar_arch/","section":"post","tags":["Linux"],"title":"Instalar Arch"},{"categories":["Basura"],"contents":"Matemáticas $$\\frac{1}{4\\pi\\epsilon_{0}}$$\nImágenes \u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e Ciudad Azteca Plaza Aragon Olimpica Ecatepec M. Muzquiz Rio de losRemedios Impulsora Nezahualcoyotl Villa de Aragon Bosque de Aragon Deportivo Oceania R. Rubio R. Flores Magon Tepito Lagunilla Buenavista A A 9 5 1 9 1 5 3 6 7 4 B 4 7 6 3 B 2 2 8 8 R. Rubio Indios Verdes Potrero Tlatelolco Juarez NiñosHeroes HospitalGeneral Etiopia Eugenia Divisiondel Norte Zapata Coyoacan Viveros M. A. De Quevedo Copilco Universidad Politecnico Misterios ValleGomez EduardoMolina Aragon TerminalAerea Hangares AgricolaOriental Canal deSan Juan Tepalcates Guelatao Peñon Viejo Acatitla Santa Marta Los Reyes La Paz Puebla CiudadDeportiva Velodromo Mixiuhca LazaroCardenas Chilpancingo Patriotismo Observatorio Juanacatlan Chapultepec Sevilla Insurgentes Cuauhtemoc Isabella Catolica Merced Moctezuma Balbuena Blvd. Pto.Aereo Gomez Farias Zaragoza Talisman Bondojito Canal delNorte FrayServando Tasqueña General Anaya Ermita Portales Nativitas Villa deCortes Xola Viaducta San AntonioAbad Zocalo Allende Revolucion Normal SanCosme Popotla ColegioMilitar Cuitlahuac Panteones CuatroCaminos Constitucionde 1917 C de laEstrella UAM I Atlalilco Iztapalapa Escuadron 201 Aculco Apatlaco Iztacalco Coyuya La Viga Obrera Doctores San Juande Letran AquilesSerdan Camarones San Joaquin Polanco Auditorio Constituyentes San Pedrode los Pinos San Antonio Mixcoac Barrancadel Muerto Tezozomoc Ferreria Azcapotzalco Norte 45 Vallejo Lindavista La Villa -Basilica El Rosario Instituto delPetroleo Deportivo18 de Marzo Martin Carrera Consulado Guerrero Garibaldi Hidalgo BellasArtes Balderas Salto delAgua Tacubaya CentroMedico Santa Anita Pantitlan Oceania SanLazaro Morelos Candelaria La Raza Autobusesdel Norte Chabacano Jamaica PinoSuarez 12 InsurgentesSur Hospital 20de Noviembre Parque delos Venados EjeCentral Mexicaltzingo Tlahuac Culhuacan San AndresTomatlan Lomas Estrella Calle 11 Periferico Oriente Tezonco Olivos Nopalera Zapotitlan Tlaltenco 12 Y más texto aquí\n","date":"2023-03-31T00:00:00Z","permalink":"https://fabrice-bernes.github.io/post/prueba/prueba/","section":"post","tags":["Linux"],"title":"Prueba"},{"categories":null,"contents":"Sobre el sitio GitHub te deja tener un sitio personal, así que lo voy a usar como vertedero para notas mal hechas de las cosas que siempre olvido en cuanto termino de usarlas.\nTambién subiré notas de los mejores cursos que llevé en la universidad, pero a esas no tiene sentido darles un formato \u0026ldquo;de blog\u0026rdquo;, así que tendrán sus propias entradas con pdf\u0026rsquo;s para descargar.\nMe interesa saber si encontraste este sitio, y cómo lo encontraste. Si puedes escribirme un correo o poner un comentario (Cuando aprenda a usar staticman o algo así), estaría muy bien.\n","date":"0001-01-01T00:00:00Z","permalink":"https://fabrice-bernes.github.io/about/","section":"","tags":null,"title":""}]